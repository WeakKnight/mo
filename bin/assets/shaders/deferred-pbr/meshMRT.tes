#version 420 core

layout(triangles, equal_spacing, ccw) in;

in vec2 uvES[];
// CameraSapce
in vec3 positionCameraSpaceES[];
// CameraSapce
in vec3 normalCameraSpaceES[];
// CameraSapce
in vec3 tangentCameraSpaceES[];
// CameraSapce
in vec3 bitangentCameraSpaceES[];

out vec2 uvFS;
// CameraSapce
out vec3 positionCameraSpaceFS;
// CameraSapce
out vec3 normalCameraSpaceFS;
// CameraSapce
out vec3 tangentCameraSpaceFS;
// CameraSapce
out vec3 bitangentCameraSpaceFS;

uniform mat4 tesProjection;
uniform sampler2D displacementMap;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main()
{
    uvFS = interpolate2D(uvES[0], uvES[1], uvES[2]);
    
    normalCameraSpaceFS = interpolate3D(normalCameraSpaceES[0], normalCameraSpaceES[1], normalCameraSpaceES[2]);
    normalCameraSpaceFS = normalize(normalCameraSpaceFS);
    
    tangentCameraSpaceFS = interpolate3D(tangentCameraSpaceES[0], tangentCameraSpaceES[1], tangentCameraSpaceES[2]);
    tangentCameraSpaceFS = normalize(tangentCameraSpaceFS);
    
    bitangentCameraSpaceFS = interpolate3D(bitangentCameraSpaceES[0], bitangentCameraSpaceES[1], bitangentCameraSpaceES[2]);
    bitangentCameraSpaceFS = normalize(bitangentCameraSpaceFS);

    positionCameraSpaceFS = interpolate3D(positionCameraSpaceES[0], positionCameraSpaceES[1], positionCameraSpaceES[2]);

    // Displace the vertex along the normal
    float Displacement = texture(displacementMap, uvFS.xy).x;
    positionCameraSpaceFS += normalCameraSpaceFS * Displacement * 0.35;
    gl_Position = tesProjection * vec4(positionCameraSpaceFS, 1.0);
}
