#version 420 core

layout(triangles, equal_spacing, ccw) in;

in vec3 positionES[];
in vec3 normalES[];
in vec2 UVES[];

out vec3 positionFS;
out vec3 normalFS;
out vec2 UVFS;

uniform mat4 tesViewProjection;
uniform sampler2D displacementMap;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main()
{
    UVFS = interpolate2D(UVES[0], UVES[1], UVES[2]);
    
    normalFS = interpolate3D(normalES[0], normalES[1], normalES[2]);
    normalFS = normalize(normalFS);

    positionFS = interpolate3D(positionES[0], positionES[1], positionES[2]);

    // Displace the vertex along the normal
    float Displacement = texture(displacementMap, UVFS.xy).x;
    positionFS += normalFS * Displacement * 1.68;
    gl_Position = tesViewProjection * vec4(positionFS, 1.0);
}
